spawn-at-startup "waybar"
spawn-at-startup "mako"
spawn-at-startup "xwayland-satellite :12"

//要运行shell命令则需要使用spawn-sh-at-startup
spawn-sh-at-startup "swaybg -i $HOME/.config/niri/wallpaper/wallhaven-gpk2ke_1920x1080.png -m fill"

xwayland-satellite {
    path "/usr/bin/xwayland-satellite"
}

input {
    keyboard {
        xkb {
            layout "us"
        }

        // 在自动启动上启用数字键 
        numlock
    }

    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag false
        // drag-lock
        natural-scroll
        //设置触摸板移动速度，范围「-1 ~ 1」
        accel-speed 1.0
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
         accel-speed 1
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // scroll-button-lock
        // middle-emulation
    }

}

cursor {
    xcursor-size 12
    //打字时隐藏光标
    hide-when-typing
}

//显示器设置 niri运行后可以通过 「niri  msg output」找到显示屏名称
output "eDP-1" {
    // 取消注释以禁用此显示器.
    // off

    //默认聚焦此显示器
    focus-at-startup
    //设置分辨率及刷新率，如不设置刷新率，则自动选择最高刷新率
    mode "1920x1080@60.030"

    // 设置分数缩放.
    scale 1

    // Transform 允许逆时针旋转显示器，有效值: normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    position x=1280 y=0
}

layout {
    // 设置windows周围缝隙
    gaps 7

    //存在多个窗口时未最大化窗口自动居中，可设置nerver always on-overflow
    center-focused-column "on-overflow"

    //只有一个窗口时自动居中显示
    always-center-single-column

    // Mod+R 预设宽度
    preset-column-widths {
        proportion 0.25
        proportion 0.5
        proportion 0.75
        proportion 0.99
        //proportion 0.33333
        //proportion 0.5
        //proportion 0.66667
        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
     preset-window-heights {
        proportion 0.25
        proportion 0.5
        proportion 0.75
        proportion 0.99
    }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.99; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        // off
        //设置聚焦框宽度为0,使用边框避免与边框同时显示
        width 0

        active-color "#7fc8ff"
        inactive-color "#505050"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        //off

        width 4
        active-color "#cba6f7"
        inactive-color "#6c7086"

        // Color of the border around windows that request your attention.
        urgent-color "#9b0000"

        // Gradients can use a few different interpolation color spaces.
        // For example, this is a pastel rainbow gradient via in="oklch longer hue".
        //
        // active-gradient from="#e5989b" to="#ffb4a2" angle=45 relative-to="workspace-view" in="oklch longer hue"

        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        // on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        //
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        //
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 30

        // Spread expands the shadow.
        spread 5

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#0007"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.

// This line starts waybar, a commonly used bar for Wayland compositors.

// To run a shell command (with variables, pipes, etc.), use spawn-sh-at-startup:
// spawn-sh-at-startup "qs -c ~/source/qs/MyAwesomeShell"

hotkey-overlay {
    // Uncomment this line to disable the "Important Hotkeys" pop-up at startup.
    skip-at-startup
    hide-not-bound
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
// prefer-no-csd

//系统截屏存放路径
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"


animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0
}

window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}


window-rule {
    match is-active=false
    opacity 0.9
}

window-rule {
    geometry-corner-radius 18
    clip-to-geometry true
    draw-border-with-background false
}

//workspace "Browser"
window-rule {
    match app-id=r#"zen*."#
    match app-id="brave-browser"
    match app-id="librewolf"
    
    open-maximized true
    open-on-workspace "Browser"
}

//workspace "Code"
window-rule {
    match app-id="kitty"
    match title=r#".*Lapce$"#
    match app-id="Code"
    
    open-on-workspace "Code"
}

workspace "Chat"
window-rule {
    match app-id="thunderbird"
    match app-id="wechat"
    match app-id="org.telegram.desktop"
    match app-id="QQ"
    
    open-on-workspace "Chat"
}

window-rule {
    match app-id="connman-gtk"
    match app-id="mpv"
    match app-id="waypaper"
    match app-id=r#".*\.exe$"#
    match app-id="QtScrcpy"
    
    match app-id="xdg-desktop-portal-gtk"
    match app-id="org.gnome.FileRoller"
    match app-id="org.kde.polkit-kde-authentication-agent-1"
    match app-id="org.keepassxc.KeePassXC"
    
    open-floating true
}

window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"
}

window-rule {
    match app-id="steam" title=r#"^notificationtoasts_\d+_desktop$"#
    default-floating-position x=10 y=10 relative-to="bottom-right"
}
binds {
    Mod+Shift+Slash { show-hotkey-overlay; }
    Mod+F12         hotkey-overlay-title="随机壁纸"   { spawn "waypaper" "--random"; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+T hotkey-overlay-title="Open a Terminal: kitty" { spawn "kitty"; }
    Mod+D hotkey-overlay-title="Run an Application: fuzzel" { spawn "fuzzel"; }
    Super+Alt+L hotkey-overlay-title="锁屏 the Screen: swaylock" { spawn "swaylock"; }

    // Use spawn-sh to run a shell command. Do this if you need pipes, multiple commands, etc.
    // Note: the entire command goes as a single argument. It's passed verbatim to `sh -c`.
    // For example, this is a standard bind to toggle the screen reader (orca).
    Super+Alt+S allow-when-locked=true hotkey-overlay-title=null { spawn-sh "pkill orca || exec orca"; }
    //音量 & 亮度控制
    XF86AudioRaiseVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"; }
    XF86MonBrightnessUp allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "+10%"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "10%-"; }

    // Open/close the Overview: a zoomed-out view of workspaces and windows.
    // You can also move the mouse into the top-left hot corner,
    // or do a four-finger swipe up on a touchpad.
    Mod+O   hotkey-overlay-title="总览"        repeat=false  { toggle-overview; }

    Mod+Q repeat=false { close-window; }
    
    // 窗口聚焦切换，位置移动
    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }
    
    // 上下方向
    Mod+Ctrl+Left    hotkey-overlay-title="左移窗口"     { move-column-left; }
    Mod+Ctrl+Down    hotkey-overlay-title="下移窗口"     { move-window-down; }
    Mod+Ctrl+Up      hotkey-overlay-title="上移窗口"     { move-window-up; }
    Mod+Ctrl+Right   hotkey-overlay-title="右移窗口"     { move-column-right; }
    Mod+V            hotkey-overlay-title="使窗口悬浮"   { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }
    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+J     { move-window-down; }
    Mod+Ctrl+K     { move-window-up; }
    Mod+Ctrl+L     { move-column-right; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }
    Mod+Shift+H     { focus-monitor-left; }
    Mod+Shift+J     { focus-monitor-down; }
    Mod+Shift+K     { focus-monitor-up; }
    Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+Page_Down        hotkey-overlay-title="下一工作区"             { focus-workspace-down; }
    Mod+Page_Up          hotkey-overlay-title="上一工作区"             { focus-workspace-up; }
    Mod+Ctrl+Page_Down   hotkey-overlay-title="将窗口移至下一工作区"   { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up     hotkey-overlay-title="将窗口移至上一工作区"   { move-column-to-workspace-up; }
    Mod+U           	 hotkey-overlay-title="下一工作区"   			{ focus-workspace-down; }
    Mod+I              	 hotkey-overlay-title="上一工作区" 			{ focus-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down   hotkey-overlay-title="将工作区下移"   { move-workspace-down; }
    Mod+Shift+Page_Up     hotkey-overlay-title="将工作区上移"   { move-workspace-up; }
    Mod+Shift+U        	  hotkey-overlay-title="将工作区下移"   { move-workspace-down; }
    Mod+Shift+I           hotkey-overlay-title="将工作区上移"	  { move-workspace-up; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    // Mod+TouchpadScrollDown { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02+"; }
    // Mod+TouchpadScrollUp   { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02-"; }
    
    // 切换 workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    // 移动窗口到其他工作空间
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    // Mod+Tab { focus-workspace-previous; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+Tab        hotkey-overlay-title="开启窗口组"             { toggle-column-tabbed-display; }
    Mod+Ctrl+Tab   hotkey-overlay-title="将右侧窗口移入窗口组"   { consume-window-into-column; }
    Mod+Alt+Tab    hotkey-overlay-title="将窗口移出窗口组"       { expel-window-from-column; }

    Mod+R         hotkey-overlay-title="更改窗口大小"     { switch-preset-column-width; }
    Mod+Shift+R         hotkey-overlay-title="更改窗口大小"     { switch-preset-window-height; }
    Mod+Ctrl+R         hotkey-overlay-title="更改窗口大小"     { reset-window-height; }
    Mod+F         hotkey-overlay-title="窗口最大化"       { maximize-column; }
    Mod+Shift+F   hotkey-overlay-title="窗口全屏"         { fullscreen-window; }


    Mod+C         hotkey-overlay-title="将窗口移至中央"   { center-column; }

    // Center all fully visible columns on screen.
    Mod+Ctrl+C { center-visible-columns; }

    Mod+Minus   hotkey-overlay-title="减小窗口宽度"       { set-column-width "-5%"; }
    Mod+Equal   hotkey-overlay-title="增大窗口宽度"       { set-column-width "+5%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus   hotkey-overlay-title="减小窗口高度" { set-window-height "-5%"; }
    Mod+Shift+Equal   hotkey-overlay-title="增大窗口高度" { set-window-height "+5%"; }

    // Toggle tabbed column display mode.
    // Windows in this column will appear as vertical tabs,
    // rather than stacked on top of each other.

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Mod+S       hotkey-overlay-title=null   { screenshot; }
    Mod+Shift+S hotkey-overlay-title=null   { screenshot-screen; }
    Mod+Alt+S   hotkey-overlay-title=null   { screenshot-window; }
    
    Print                                   { screenshot-window; }
    Shift+Print                             { screenshot-window; }
    Alt+Print                               { screenshot-window; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }
    Alt+Tab       repeat=false hotkey-overlay-title="显示当前窗口"    { spawn "niriswitcherctl" "show" "--window"; }
    Alt+Shift+Tab repeat=false hotkey-overlay-title="显示当前工作区"  { spawn "niriswitcherctl" "show" "--workspace"; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
}
